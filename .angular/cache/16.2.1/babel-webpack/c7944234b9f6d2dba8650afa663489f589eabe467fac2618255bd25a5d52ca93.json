{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _getDataFromUrl;\nimport { errorPrefix, generatedAttribute } from \"./Utils/Constants\";\nimport { getLogger, isBoolean, isFunction, isNumber, isString, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { Container } from \"./Container\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher\";\nimport { Plugins } from \"./Utils/Plugins\";\nimport { getRandom } from \"../Utils/NumberUtils\";\nfunction getDataFromUrl(_x) {\n  return (_getDataFromUrl = _getDataFromUrl || _asyncToGenerator(function* (data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n      return data.fallback;\n    }\n    const response = yield fetch(url);\n    if (response.ok) {\n      return response.json();\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n  })).apply(this, arguments);\n}\nfunction isParamsEmpty(params) {\n  return !params.id && !params.element && !params.url && !params.options;\n}\nfunction isParams(obj) {\n  return !isParamsEmpty(obj);\n}\nexport class Engine {\n  constructor() {\n    this._configs = new Map();\n    this._domArray = [];\n    this._eventDispatcher = new EventDispatcher();\n    this._initialized = false;\n    this.plugins = new Plugins(this);\n  }\n  get configs() {\n    const res = {};\n    for (const [name, config] of this._configs) {\n      res[name] = config;\n    }\n    return res;\n  }\n  get version() {\n    return \"2.12.0\";\n  }\n  addConfig(nameOrConfig, config) {\n    if (isString(nameOrConfig)) {\n      if (config) {\n        config.name = nameOrConfig;\n        this._configs.set(nameOrConfig, config);\n      }\n    } else {\n      this._configs.set(nameOrConfig.name ?? \"default\", nameOrConfig);\n    }\n  }\n  addEventListener(type, listener) {\n    this._eventDispatcher.addEventListener(type, listener);\n  }\n  addInteractor(name, interactorInitializer, refresh = true) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.plugins.addInteractor(name, interactorInitializer);\n      yield _this.refresh(refresh);\n    })();\n  }\n  addMover(name, moverInitializer, refresh = true) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.plugins.addParticleMover(name, moverInitializer);\n      yield _this2.refresh(refresh);\n    })();\n  }\n  addParticleUpdater(name, updaterInitializer, refresh = true) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.plugins.addParticleUpdater(name, updaterInitializer);\n      yield _this3.refresh(refresh);\n    })();\n  }\n  addPathGenerator(name, generator, refresh = true) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.plugins.addPathGenerator(name, generator);\n      yield _this4.refresh(refresh);\n    })();\n  }\n  addPlugin(plugin, refresh = true) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.plugins.addPlugin(plugin);\n      yield _this5.refresh(refresh);\n    })();\n  }\n  addPreset(preset, options, override = false, refresh = true) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.plugins.addPreset(preset, options, override);\n      yield _this6.refresh(refresh);\n    })();\n  }\n  addShape(shape, drawer, initOrRefresh, afterEffectOrRefresh, destroyOrRefresh, refresh = true) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      let customDrawer;\n      let realRefresh = refresh,\n        realInit,\n        realAfterEffect,\n        realDestroy;\n      if (isBoolean(initOrRefresh)) {\n        realRefresh = initOrRefresh;\n        realInit = undefined;\n      } else {\n        realInit = initOrRefresh;\n      }\n      if (isBoolean(afterEffectOrRefresh)) {\n        realRefresh = afterEffectOrRefresh;\n        realAfterEffect = undefined;\n      } else {\n        realAfterEffect = afterEffectOrRefresh;\n      }\n      if (isBoolean(destroyOrRefresh)) {\n        realRefresh = destroyOrRefresh;\n        realDestroy = undefined;\n      } else {\n        realDestroy = destroyOrRefresh;\n      }\n      if (isFunction(drawer)) {\n        customDrawer = {\n          afterEffect: realAfterEffect,\n          destroy: realDestroy,\n          draw: drawer,\n          init: realInit\n        };\n      } else {\n        customDrawer = drawer;\n      }\n      _this7.plugins.addShapeDrawer(shape, customDrawer);\n      yield _this7.refresh(realRefresh);\n    })();\n  }\n  dispatchEvent(type, args) {\n    this._eventDispatcher.dispatchEvent(type, args);\n  }\n  dom() {\n    return this._domArray;\n  }\n  domItem(index) {\n    const dom = this.dom(),\n      item = dom[index];\n    if (!item || item.destroyed) {\n      dom.splice(index, 1);\n      return;\n    }\n    return item;\n  }\n  init() {\n    if (this._initialized) {\n      return;\n    }\n    this._initialized = true;\n  }\n  load(tagIdOrOptionsOrParams, options) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return _this8.loadFromArray(tagIdOrOptionsOrParams, options);\n    })();\n  }\n  loadFromArray(tagIdOrOptionsOrParams, optionsOrIndex, index) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      let params;\n      if (!isParams(tagIdOrOptionsOrParams)) {\n        params = {};\n        if (isString(tagIdOrOptionsOrParams)) {\n          params.id = tagIdOrOptionsOrParams;\n        } else {\n          params.options = tagIdOrOptionsOrParams;\n        }\n        if (isNumber(optionsOrIndex)) {\n          params.index = optionsOrIndex;\n        } else {\n          params.options = optionsOrIndex ?? params.options;\n        }\n        params.index = index ?? params.index;\n      } else {\n        params = tagIdOrOptionsOrParams;\n      }\n      return _this9._loadParams(params);\n    })();\n  }\n  loadJSON(tagId, pathConfigJson, index) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      let url, id;\n      if (isNumber(pathConfigJson) || pathConfigJson === undefined) {\n        url = tagId;\n      } else {\n        id = tagId;\n        url = pathConfigJson;\n      }\n      return _this10._loadParams({\n        id: id,\n        url,\n        index\n      });\n    })();\n  }\n  refresh(refresh = true) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (!refresh) {\n        return;\n      }\n      _this11.dom().forEach(t => t.refresh());\n    })();\n  }\n  removeEventListener(type, listener) {\n    this._eventDispatcher.removeEventListener(type, listener);\n  }\n  set(id, element, options, index) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const params = {\n        index\n      };\n      if (isString(id)) {\n        params.id = id;\n      } else {\n        params.element = id;\n      }\n      if (element instanceof HTMLElement) {\n        params.element = element;\n      } else {\n        params.options = element;\n      }\n      if (isNumber(options)) {\n        params.index = options;\n      } else {\n        params.options = options ?? params.options;\n      }\n      return _this12._loadParams(params);\n    })();\n  }\n  setJSON(id, element, pathConfigJson, index) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const params = {};\n      if (id instanceof HTMLElement) {\n        params.element = id;\n        params.url = element;\n        params.index = pathConfigJson;\n      } else {\n        params.id = id;\n        params.element = element;\n        params.url = pathConfigJson;\n        params.index = index;\n      }\n      return _this13._loadParams(params);\n    })();\n  }\n  setOnClickHandler(callback) {\n    const dom = this.dom();\n    if (!dom.length) {\n      throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n    }\n    for (const domItem of dom) {\n      domItem.addClickHandler(callback);\n    }\n  }\n  _loadParams(params) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const id = params.id ?? `tsparticles${Math.floor(getRandom() * 10000)}`,\n        {\n          index,\n          url\n        } = params,\n        options = url ? yield getDataFromUrl({\n          fallback: params.options,\n          url,\n          index\n        }) : params.options;\n      let domContainer = params.element ?? document.getElementById(id);\n      if (!domContainer) {\n        domContainer = document.createElement(\"div\");\n        domContainer.id = id;\n        document.body.append(domContainer);\n      }\n      const currentOptions = itemFromSingleOrMultiple(options, index),\n        dom = _this14.dom(),\n        oldIndex = dom.findIndex(v => v.id === id);\n      if (oldIndex >= 0) {\n        const old = _this14.domItem(oldIndex);\n        if (old && !old.destroyed) {\n          old.destroy();\n          dom.splice(oldIndex, 1);\n        }\n      }\n      let canvasEl;\n      if (domContainer.tagName.toLowerCase() === \"canvas\") {\n        canvasEl = domContainer;\n        canvasEl.dataset[generatedAttribute] = \"false\";\n      } else {\n        const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n        if (existingCanvases.length) {\n          canvasEl = existingCanvases[0];\n          canvasEl.dataset[generatedAttribute] = \"false\";\n        } else {\n          canvasEl = document.createElement(\"canvas\");\n          canvasEl.dataset[generatedAttribute] = \"true\";\n          domContainer.appendChild(canvasEl);\n        }\n      }\n      if (!canvasEl.style.width) {\n        canvasEl.style.width = \"100%\";\n      }\n      if (!canvasEl.style.height) {\n        canvasEl.style.height = \"100%\";\n      }\n      const newItem = new Container(_this14, id, currentOptions);\n      if (oldIndex >= 0) {\n        dom.splice(oldIndex, 0, newItem);\n      } else {\n        dom.push(newItem);\n      }\n      newItem.canvas.loadCanvas(canvasEl);\n      yield newItem.start();\n      return newItem;\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}