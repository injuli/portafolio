{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExternalInteractorBase, isInArray } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      connect = container.actualOptions.interactivity.modes.connect;\n    if (!connect) {\n      return;\n    }\n    container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n    container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n  }\n  interact() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = _this.container,\n        options = container.actualOptions;\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n        const mousePos = container.interactivity.mouse.position;\n        if (!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos) {\n          return;\n        }\n        const distance = Math.abs(container.retina.connectModeRadius),\n          query = container.particles.quadTree.queryCircle(mousePos, distance, p => _this.isEnabled(p));\n        let i = 0;\n        for (const p1 of query) {\n          const pos1 = p1.getPosition();\n          for (const p2 of query.slice(i + 1)) {\n            const pos2 = p2.getPosition(),\n              distMax = Math.abs(container.retina.connectModeDistance),\n              xDiff = Math.abs(pos1.x - pos2.x),\n              yDiff = Math.abs(pos1.y - pos2.y);\n            if (xDiff < distMax && yDiff < distMax) {\n              drawConnection(container, p1, p2);\n            }\n          }\n          ++i;\n        }\n      }\n    })();\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n    return isInArray(\"connect\", events.onHover.mode);\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.connect) {\n      options.connect = new Connect();\n    }\n    for (const source of sources) {\n      options.connect.load(source?.connect);\n    }\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}