{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExternalInteractorBase } from \"../../../Core/Utils/ExternalInteractorBase\";\nimport { isInArray } from \"../../../Utils/Utils\";\nexport class TrailMaker extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    this.delay = 0;\n  }\n  interact(delta) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d;\n      if (!_this.container.retina.reduceFactor) {\n        return;\n      }\n      const container = _this.container,\n        options = container.actualOptions,\n        trailOptions = options.interactivity.modes.trail,\n        optDelay = trailOptions.delay * 1000 / _this.container.retina.reduceFactor;\n      if (_this.delay < optDelay) {\n        _this.delay += delta.value;\n      }\n      if (_this.delay < optDelay) {\n        return;\n      }\n      let canEmit = true;\n      if (trailOptions.pauseOnStop) {\n        if (container.interactivity.mouse.position === _this.lastPosition || ((_a = container.interactivity.mouse.position) === null || _a === void 0 ? void 0 : _a.x) === ((_b = _this.lastPosition) === null || _b === void 0 ? void 0 : _b.x) && ((_c = container.interactivity.mouse.position) === null || _c === void 0 ? void 0 : _c.y) === ((_d = _this.lastPosition) === null || _d === void 0 ? void 0 : _d.y)) {\n          canEmit = false;\n        }\n      }\n      if (container.interactivity.mouse.position) {\n        _this.lastPosition = {\n          x: container.interactivity.mouse.position.x,\n          y: container.interactivity.mouse.position.y\n        };\n      } else {\n        delete _this.lastPosition;\n      }\n      if (canEmit) {\n        container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n      }\n      _this.delay -= optDelay;\n    })();\n  }\n  isEnabled() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = options.interactivity.events;\n    return mouse.clicking && mouse.inside && !!mouse.position && isInArray(\"trail\", events.onClick.mode) || mouse.inside && !!mouse.position && isInArray(\"trail\", events.onHover.mode);\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}