{"ast":null,"code":"import { executeOnSingleOrMultiple } from \"../../Utils/Utils\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n  let res = map.get(container);\n  if (!res || force) {\n    res = [...initializers.values()].map(t => t(container));\n    map.set(container, res);\n  }\n  return res;\n}\nexport class Plugins {\n  constructor(engine) {\n    this._engine = engine;\n    this.plugins = [];\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  addInteractor(name, initInteractor) {\n    this._initializers.interactors.set(name, initInteractor);\n  }\n  addParticleMover(name, initMover) {\n    this._initializers.movers.set(name, initMover);\n  }\n  addParticleUpdater(name, initUpdater) {\n    this._initializers.updaters.set(name, initUpdater);\n  }\n  addPathGenerator(type, pathGenerator) {\n    !this.getPathGenerator(type) && this.pathGenerators.set(type, pathGenerator);\n  }\n  addPlugin(plugin) {\n    !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n  }\n  addPreset(presetKey, options, override = false) {\n    (override || !this.getPreset(presetKey)) && this.presets.set(presetKey, options);\n  }\n  addShapeDrawer(types, drawer) {\n    executeOnSingleOrMultiple(types, type => {\n      !this.getShapeDrawer(type) && this.drawers.set(type, drawer);\n    });\n  }\n  destroy(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n    }\n    return res;\n  }\n  getInteractors(container, force = false) {\n    return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n  getMovers(container, force = false) {\n    return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n  getSupportedShapes() {\n    return this.drawers.keys();\n  }\n  getUpdaters(container, force = false) {\n    return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  loadParticlesOptions(container, options, ...sourceOptions) {\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    for (const updater of updaters) {\n      updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}