{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExternalInteractorBase, isInArray } from \"tsparticles-engine\";\nimport { Trail } from \"./Options/Classes/Trail\";\nexport class TrailMaker extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    this._delay = 0;\n  }\n  clear() {}\n  init() {}\n  interact(delta) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = _this.container,\n        {\n          interactivity\n        } = container;\n      if (!container.retina.reduceFactor) {\n        return;\n      }\n      const options = container.actualOptions,\n        trailOptions = options.interactivity.modes.trail;\n      if (!trailOptions) {\n        return;\n      }\n      const optDelay = trailOptions.delay * 1000 / _this.container.retina.reduceFactor;\n      if (_this._delay < optDelay) {\n        _this._delay += delta.value;\n      }\n      if (_this._delay < optDelay) {\n        return;\n      }\n      const canEmit = !(trailOptions.pauseOnStop && (interactivity.mouse.position === _this._lastPosition || interactivity.mouse.position?.x === _this._lastPosition?.x && interactivity.mouse.position?.y === _this._lastPosition?.y));\n      const mousePos = container.interactivity.mouse.position;\n      if (mousePos) {\n        _this._lastPosition = {\n          ...mousePos\n        };\n      } else {\n        delete _this._lastPosition;\n      }\n      if (canEmit) {\n        container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n      }\n      _this._delay -= optDelay;\n    })();\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? options.interactivity).events;\n    return mouse.clicking && mouse.inside && !!mouse.position && isInArray(\"trail\", events.onClick.mode) || mouse.inside && !!mouse.position && isInArray(\"trail\", events.onHover.mode);\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.trail) {\n      options.trail = new Trail();\n    }\n    for (const source of sources) {\n      options.trail.load(source?.trail);\n    }\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}