{"ast":null,"code":"import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n  const destroyOptions = parent.options.destroy;\n  if (!destroyOptions) {\n    return;\n  }\n  const splitOptions = destroyOptions.split,\n    options = loadParticlesOptions(engine, container, parent.options),\n    factor = getValue(splitOptions.factor),\n    parentColor = parent.getFillColor();\n  if (splitOptions.color) {\n    options.color.load(splitOptions.color);\n  } else if (splitOptions.colorOffset && parentColor) {\n    options.color.load({\n      value: {\n        hsl: {\n          h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? 0),\n          s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? 0),\n          l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? 0)\n        }\n      }\n    });\n  } else {\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n  }\n  options.move.load({\n    center: {\n      x: parent.position.x,\n      y: parent.position.y,\n      mode: \"precise\"\n    }\n  });\n  if (isNumber(options.size.value)) {\n    options.size.value /= factor;\n  } else {\n    options.size.value.min /= factor;\n    options.size.value.max /= factor;\n  }\n  options.load(splitParticlesOptions);\n  const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n    position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n  return container.particles.addParticle(position, options, parent.group, particle => {\n    if (particle.size.value < 0.5) {\n      return false;\n    }\n    particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n    particle.splitCount = (parent.splitCount ?? 0) + 1;\n    particle.unbreakable = true;\n    setTimeout(() => {\n      particle.unbreakable = false;\n    }, 500);\n    return true;\n  });\n}\nexport function split(engine, container, particle) {\n  const destroyOptions = particle.options.destroy;\n  if (!destroyOptions) {\n    return;\n  }\n  const splitOptions = destroyOptions.split;\n  if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n    return;\n  }\n  const rate = getValue(splitOptions.rate),\n    particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n  for (let i = 0; i < rate; i++) {\n    addSplitParticle(engine, container, particle, particlesSplitOptions);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}