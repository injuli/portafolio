{"ast":null,"code":"import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n  constructor() {\n    this._initSpin = particle => {\n      const container = particle.container,\n        options = particle.options,\n        spinOptions = options.move.spin;\n      if (!spinOptions.enable) {\n        return;\n      }\n      const spinPos = spinOptions.position ?? {\n          x: 50,\n          y: 50\n        },\n        spinCenter = {\n          x: spinPos.x / 100 * container.canvas.size.width,\n          y: spinPos.y / 100 * container.canvas.size.height\n        },\n        pos = particle.getPosition(),\n        distance = getDistance(pos, spinCenter),\n        spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    };\n  }\n  init(particle) {\n    const options = particle.options,\n      gravityOptions = options.move.gravity;\n    particle.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this._initSpin(particle);\n  }\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n  move(particle, delta) {\n    const particleOptions = particle.options,\n      moveOptions = particleOptions.move;\n    if (!moveOptions.enable) {\n      return;\n    }\n    const container = particle.container,\n      pxRatio = container.retina.pixelRatio,\n      slowFactor = getProximitySpeedFactor(particle),\n      baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) * container.retina.reduceFactor,\n      moveDrift = particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio,\n      maxSize = getRangeMax(particleOptions.size.value) * pxRatio,\n      sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n      moveSpeed = baseSpeed * sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n      maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n    }\n    applyDistance(particle);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}