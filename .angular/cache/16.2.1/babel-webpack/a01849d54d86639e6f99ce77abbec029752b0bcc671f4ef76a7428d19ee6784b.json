{"ast":null,"code":"export class ByteStream {\n  constructor(bytes) {\n    this.pos = 0;\n    this.data = new Uint8ClampedArray(bytes);\n  }\n  getString(count) {\n    const slice = this.data.slice(this.pos, this.pos + count);\n    this.pos += slice.length;\n    return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n  }\n  nextByte() {\n    return this.data[this.pos++];\n  }\n  nextTwoBytes() {\n    this.pos += 2;\n    return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n  }\n  readSubBlocks() {\n    let blockString = \"\",\n      size = 0;\n    do {\n      size = this.data[this.pos++];\n      for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {}\n    } while (size !== 0);\n    return blockString;\n  }\n  readSubBlocksBin() {\n    let size = 0,\n      len = 0;\n    for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n      len += size;\n    }\n    const blockData = new Uint8Array(len);\n    for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n      for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {}\n    }\n    return blockData;\n  }\n  skipSubBlocks() {\n    for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {}\n    this.pos++;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}