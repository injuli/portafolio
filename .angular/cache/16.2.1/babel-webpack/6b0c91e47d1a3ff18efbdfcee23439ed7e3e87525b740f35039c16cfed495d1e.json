{"ast":null,"code":"import { deepExtend, isArray } from \"../../../../Utils/Utils\";\nconst charKey = \"character\",\n  charAltKey = \"char\",\n  imageKey = \"image\",\n  imageAltKey = \"images\",\n  polygonKey = \"polygon\",\n  polygonAltKey = \"star\";\nexport class Shape {\n  constructor() {\n    this.loadShape = (item, mainKey, altKey, altOverride) => {\n      if (!item) {\n        return;\n      }\n      const itemIsArray = isArray(item),\n        emptyValue = itemIsArray ? [] : {},\n        mainDifferentValues = itemIsArray !== isArray(this.options[mainKey]),\n        altDifferentValues = itemIsArray !== isArray(this.options[altKey]);\n      if (mainDifferentValues) {\n        this.options[mainKey] = emptyValue;\n      }\n      if (altDifferentValues && altOverride) {\n        this.options[altKey] = emptyValue;\n      }\n      this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n      if (!this.options[altKey] || altOverride) {\n        this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n      }\n    };\n    this.close = true;\n    this.fill = true;\n    this.options = {};\n    this.type = \"circle\";\n  }\n  get character() {\n    return this.options[charKey] ?? this.options[charAltKey];\n  }\n  set character(value) {\n    this.options[charAltKey] = this.options[charKey] = value;\n  }\n  get custom() {\n    return this.options;\n  }\n  set custom(value) {\n    this.options = value;\n  }\n  get image() {\n    return this.options[imageKey] ?? this.options[imageAltKey];\n  }\n  set image(value) {\n    this.options[imageAltKey] = this.options[imageKey] = value;\n  }\n  get images() {\n    return this.image;\n  }\n  set images(value) {\n    this.image = value;\n  }\n  get polygon() {\n    return this.options[polygonKey] ?? this.options[polygonAltKey];\n  }\n  set polygon(value) {\n    this.options[polygonAltKey] = this.options[polygonKey] = value;\n  }\n  get stroke() {\n    return [];\n  }\n  set stroke(_value) {}\n  load(data) {\n    if (!data) {\n      return;\n    }\n    const options = data.options ?? data.custom;\n    if (options !== undefined) {\n      for (const shape in options) {\n        const item = options[shape];\n        if (item) {\n          this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n        }\n      }\n    }\n    this.loadShape(data.character, charKey, charAltKey, true);\n    this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n    this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n    if (data.close !== undefined) {\n      this.close = data.close;\n    }\n    if (data.fill !== undefined) {\n      this.fill = data.fill;\n    }\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}