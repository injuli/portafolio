{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _loadImage, _downloadSvgImage;\nimport { getStyleFromHsl } from \"../../Utils/ColorUtils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n  if (!svgData) {\n    return \"\";\n  }\n  const colorStyle = getStyleFromHsl(color, opacity);\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport function loadImage(_x) {\n  return (_loadImage = _loadImage || _asyncToGenerator(function* (image) {\n    return new Promise(resolve => {\n      image.loading = true;\n      const img = new Image();\n      img.addEventListener(\"load\", () => {\n        image.element = img;\n        image.loading = false;\n        resolve();\n      });\n      img.addEventListener(\"error\", () => {\n        image.error = true;\n        image.loading = false;\n        console.error(`Error tsParticles - loading image: ${image.source}`);\n        resolve();\n      });\n      img.src = image.source;\n    });\n  })).apply(this, arguments);\n}\nexport function downloadSvgImage(_x2) {\n  return (_downloadSvgImage = _downloadSvgImage || _asyncToGenerator(function* (image) {\n    if (image.type !== \"svg\") {\n      yield loadImage(image);\n      return;\n    }\n    image.loading = true;\n    const response = yield fetch(image.source);\n    image.loading = false;\n    if (!response.ok) {\n      console.error(\"Error tsParticles - Image not found\");\n      image.error = true;\n    }\n    if (!image.error) {\n      image.svgData = yield response.text();\n    }\n  })).apply(this, arguments);\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n  const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1);\n  const svg = new Blob([svgColoredData], {\n    type: \"image/svg+xml\"\n  });\n  const domUrl = URL || window.URL || window.webkitURL || window;\n  const url = domUrl.createObjectURL(svg);\n  const img = new Image();\n  const imageRes = {\n    data: Object.assign(Object.assign({}, image), {\n      svgData: svgColoredData\n    }),\n    ratio: imageData.width / imageData.height,\n    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n    source: imageData.src\n  };\n  img.addEventListener(\"load\", () => {\n    const pImage = particle.image;\n    if (pImage) {\n      pImage.loaded = true;\n      image.element = img;\n    }\n    domUrl.revokeObjectURL(url);\n  });\n  img.addEventListener(\"error\", () => {\n    domUrl.revokeObjectURL(url);\n    const img2 = Object.assign(Object.assign({}, image), {\n      error: false,\n      loading: true\n    });\n    loadImage(img2).then(() => {\n      const pImage = particle.image;\n      if (pImage) {\n        image.element = img2.element;\n        pImage.loaded = true;\n      }\n    });\n  });\n  img.src = url;\n  return imageRes;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}