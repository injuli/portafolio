{"ast":null,"code":"import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n  switch (particle.options.opacity.animation.destroy) {\n    case \"max\":\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n      break;\n    case \"min\":\n      if (value <= minValue) {\n        particle.destroy();\n      }\n      break;\n  }\n}\nexport function updateOpacity(particle, delta) {\n  const data = particle.opacity;\n  if (particle.destroyed || !data?.enable || (data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0)) {\n    return;\n  }\n  const minValue = data.min,\n    maxValue = data.max,\n    decay = data.decay ?? 1;\n  if (!data.time) {\n    data.time = 0;\n  }\n  if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n    data.time += delta.value;\n  }\n  if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n    return;\n  }\n  switch (data.status) {\n    case \"increasing\":\n      if (data.value >= maxValue) {\n        data.status = \"decreasing\";\n        if (!data.loops) {\n          data.loops = 0;\n        }\n        data.loops++;\n      } else {\n        data.value += (data.velocity ?? 0) * delta.factor;\n      }\n      break;\n    case \"decreasing\":\n      if (data.value <= minValue) {\n        data.status = \"increasing\";\n        if (!data.loops) {\n          data.loops = 0;\n        }\n        data.loops++;\n      } else {\n        data.value -= (data.velocity ?? 0) * delta.factor;\n      }\n      break;\n  }\n  if (data.velocity && data.decay !== 1) {\n    data.velocity *= decay;\n  }\n  checkDestroy(particle, data.value, minValue, maxValue);\n  if (!particle.destroyed) {\n    data.value = clamp(data.value, minValue, maxValue);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}