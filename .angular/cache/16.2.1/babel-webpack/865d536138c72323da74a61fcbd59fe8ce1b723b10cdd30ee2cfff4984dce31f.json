{"ast":null,"code":"import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl } from \"tsparticles-engine\";\nimport { updateStrokeColor } from \"./Utils\";\nexport class StrokeColorUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    const container = this.container,\n      options = particle.options;\n    const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n    particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n    particle.strokeOpacity = getRangeValue(stroke.opacity ?? 1);\n    particle.strokeAnimation = stroke.color?.animation;\n    const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n    if (strokeHslColor) {\n      particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n    }\n  }\n  isEnabled(particle) {\n    const color = particle.strokeAnimation,\n      {\n        strokeColor\n      } = particle;\n    return !particle.destroyed && !particle.spawning && !!color && (strokeColor?.h.value !== undefined && strokeColor.h.enable || strokeColor?.s.value !== undefined && strokeColor.s.enable || strokeColor?.l.value !== undefined && strokeColor.l.enable);\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateStrokeColor(particle, delta);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}