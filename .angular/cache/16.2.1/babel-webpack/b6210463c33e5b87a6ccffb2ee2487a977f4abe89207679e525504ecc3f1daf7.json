{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport class Absorbers {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n    container.getAbsorber = idxOrName => idxOrName === undefined || isNumber(idxOrName) ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n    container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n  }\n  addAbsorber(options, position) {\n    const absorber = new AbsorberInstance(this, this.container, options, position);\n    this.array.push(absorber);\n    return absorber;\n  }\n  draw(context) {\n    for (const absorber of this.array) {\n      absorber.draw(context);\n    }\n  }\n  handleClickMode(mode) {\n    const absorberOptions = this.absorbers,\n      modeAbsorbers = this.interactivityAbsorbers;\n    if (mode === \"absorber\") {\n      const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers),\n        absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions),\n        aPosition = this.container.interactivity.mouse.clickPosition;\n      this.addAbsorber(absorbersOptions, aPosition);\n    }\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.absorbers = _this.container.actualOptions.absorbers;\n      _this.interactivityAbsorbers = _this.container.actualOptions.interactivity.modes.absorbers;\n      executeOnSingleOrMultiple(_this.absorbers, absorber => {\n        _this.addAbsorber(absorber);\n      });\n    })();\n  }\n  particleUpdate(particle) {\n    for (const absorber of this.array) {\n      absorber.attract(particle);\n      if (particle.destroyed) {\n        break;\n      }\n    }\n  }\n  removeAbsorber(absorber) {\n    const index = this.array.indexOf(absorber);\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n  resize() {\n    for (const absorber of this.array) {\n      absorber.resize();\n    }\n  }\n  stop() {\n    this.array = [];\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}