{"ast":null,"code":"import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nexport function initParticle(particle) {\n  const rollOpt = particle.options.roll;\n  if (!rollOpt?.enable) {\n    particle.roll = {\n      enable: false,\n      horizontal: false,\n      vertical: false,\n      angle: 0,\n      speed: 0\n    };\n    return;\n  }\n  particle.roll = {\n    enable: rollOpt.enable,\n    horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n    vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n    angle: getRandom() * Math.PI * 2,\n    speed: getRangeValue(rollOpt.speed) / 360\n  };\n  if (rollOpt.backColor) {\n    particle.backColor = rangeColorToHsl(rollOpt.backColor);\n  } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n    const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n    particle.roll.alter = {\n      type: alterType,\n      value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n    };\n  } else if (rollOpt.darken.enable) {\n    particle.roll.alter = {\n      type: \"darken\",\n      value: getRangeValue(rollOpt.darken.value)\n    };\n  } else if (rollOpt.enlighten.enable) {\n    particle.roll.alter = {\n      type: \"enlighten\",\n      value: getRangeValue(rollOpt.enlighten.value)\n    };\n  }\n}\nexport function updateRoll(particle, delta) {\n  const roll = particle.options.roll,\n    data = particle.roll;\n  if (!data || !roll?.enable) {\n    return;\n  }\n  const speed = data.speed * delta.factor,\n    max = 2 * Math.PI;\n  data.angle += speed;\n  if (data.angle > max) {\n    data.angle -= max;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}