{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _loadImage, _loadGifImage, _downloadSvgImage;\nimport { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n  if (!svgData) {\n    return \"\";\n  }\n  const colorStyle = getStyleFromHsl(color, opacity);\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport function loadImage(_x) {\n  return (_loadImage = _loadImage || _asyncToGenerator(function* (image) {\n    return new Promise(resolve => {\n      image.loading = true;\n      const img = new Image();\n      image.element = img;\n      img.addEventListener(\"load\", () => {\n        image.loading = false;\n        resolve();\n      });\n      img.addEventListener(\"error\", () => {\n        image.element = undefined;\n        image.error = true;\n        image.loading = false;\n        getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n        resolve();\n      });\n      img.src = image.source;\n    });\n  })).apply(this, arguments);\n}\nexport function loadGifImage(_x2) {\n  return (_loadGifImage = _loadGifImage || _asyncToGenerator(function* (image) {\n    if (image.type !== \"gif\") {\n      yield loadImage(image);\n      return;\n    }\n    image.loading = true;\n    try {\n      image.gifData = yield decodeGIF(image.source);\n      image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n      if (image.gifLoopCount === 0) {\n        image.gifLoopCount = Infinity;\n      }\n    } catch {\n      image.error = true;\n    }\n    image.loading = false;\n  })).apply(this, arguments);\n}\nexport function downloadSvgImage(_x3) {\n  return (_downloadSvgImage = _downloadSvgImage || _asyncToGenerator(function* (image) {\n    if (image.type !== \"svg\") {\n      yield loadImage(image);\n      return;\n    }\n    image.loading = true;\n    const response = yield fetch(image.source);\n    if (!response.ok) {\n      getLogger().error(`${errorPrefix} Image not found`);\n      image.error = true;\n    } else {\n      image.svgData = yield response.text();\n    }\n    image.loading = false;\n  })).apply(this, arguments);\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1),\n    imageRes = {\n      color,\n      gif: imageData.gif,\n      data: {\n        ...image,\n        svgData: svgColoredData\n      },\n      loaded: false,\n      ratio: imageData.width / imageData.height,\n      replaceColor: imageData.replaceColor ?? imageData.replace_color,\n      source: imageData.src\n    };\n  return new Promise(resolve => {\n    const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      }),\n      domUrl = URL || window.URL || window.webkitURL || window,\n      url = domUrl.createObjectURL(svg),\n      img = new Image();\n    img.addEventListener(\"load\", () => {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", /*#__PURE__*/_asyncToGenerator(function* () {\n      domUrl.revokeObjectURL(url);\n      const img2 = {\n        ...image,\n        error: false,\n        loading: true\n      };\n      yield loadImage(img2);\n      imageRes.loaded = true;\n      imageRes.element = img2.element;\n      resolve(imageRes);\n    }));\n    img.src = url;\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}