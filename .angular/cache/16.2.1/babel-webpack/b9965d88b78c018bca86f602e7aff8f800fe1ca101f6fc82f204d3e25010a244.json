{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _loadImageShape;\nimport { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\nfunction addLoadImageToEngine(engine) {\n  var _ref;\n  if (engine.loadImage) {\n    return;\n  }\n  engine.loadImage = function (_x) {\n    return (_ref = _ref || _asyncToGenerator(function* (data) {\n      if (!data.name && !data.src) {\n        throw new Error(`${errorPrefix} no image source provided`);\n      }\n      if (!engine.images) {\n        engine.images = [];\n      }\n      if (engine.images.find(t => t.name === data.name || t.source === data.src)) {\n        return;\n      }\n      try {\n        const image = {\n          gif: data.gif ?? false,\n          name: data.name ?? data.src,\n          source: data.src,\n          type: data.src.substring(data.src.length - 3),\n          error: false,\n          loading: true,\n          replaceColor: data.replaceColor,\n          ratio: data.width && data.height ? data.width / data.height : undefined\n        };\n        engine.images.push(image);\n        const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n        yield imageFunc(image);\n      } catch {\n        throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n      }\n    })).apply(this, arguments);\n  };\n}\nexport function loadImageShape(_x2) {\n  return (_loadImageShape = _loadImageShape || _asyncToGenerator(function* (engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    yield engine.addPlugin(preloader, refresh);\n    yield engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n  })).apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}