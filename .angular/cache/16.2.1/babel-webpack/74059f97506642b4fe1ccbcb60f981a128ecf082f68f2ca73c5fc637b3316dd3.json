{"ast":null,"code":"import { AnimationOptions, RangedAnimationOptions } from \"./AnimationOptions\";\nimport { Random } from \"./Random\";\nimport { isBoolean } from \"../../Utils/Utils\";\nimport { setRangeValue } from \"../../Utils/NumberUtils\";\nexport class ValueWithRandom {\n  constructor() {\n    this.random = new Random();\n    this.value = 0;\n  }\n  load(data) {\n    if (!data) {\n      return;\n    }\n    if (isBoolean(data.random)) {\n      this.random.enable = data.random;\n    } else {\n      this.random.load(data.random);\n    }\n    if (data.value !== undefined) {\n      this.value = setRangeValue(data.value, this.random.enable ? this.random.minimumValue : undefined);\n    }\n  }\n}\nexport class AnimationValueWithRandom extends ValueWithRandom {\n  constructor() {\n    super();\n    this.animation = new AnimationOptions();\n  }\n  get anim() {\n    return this.animation;\n  }\n  set anim(value) {\n    this.animation = value;\n  }\n  load(data) {\n    super.load(data);\n    if (!data) {\n      return;\n    }\n    const animation = data.animation ?? data.anim;\n    if (animation !== undefined) {\n      this.animation.load(animation);\n    }\n  }\n}\nexport class RangedAnimationValueWithRandom extends AnimationValueWithRandom {\n  constructor() {\n    super();\n    this.animation = new RangedAnimationOptions();\n  }\n  load(data) {\n    super.load(data);\n    if (!data) {\n      return;\n    }\n    const animation = data.animation ?? data.anim;\n    if (animation !== undefined) {\n      this.value = setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}