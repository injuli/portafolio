{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {}\n  interact(p1, delta) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (p1.destroyed || p1.spawning) {\n        return;\n      }\n      const container = _this.container,\n        pos1 = p1.getPosition(),\n        radius1 = p1.getRadius(),\n        query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n      for (const p2 of query) {\n        if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {\n          continue;\n        }\n        const pos2 = p2.getPosition(),\n          radius2 = p2.getRadius();\n        if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n          continue;\n        }\n        const dist = getDistance(pos1, pos2),\n          distP = radius1 + radius2;\n        if (dist > distP) {\n          continue;\n        }\n        resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n      }\n    })();\n  }\n  isEnabled(particle) {\n    return particle.options.collisions.enable;\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}