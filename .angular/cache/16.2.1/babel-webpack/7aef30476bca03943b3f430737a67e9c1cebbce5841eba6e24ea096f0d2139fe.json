{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    this._processBounce = (position, radius, area) => {\n      const query = this.container.particles.quadTree.query(area, p => this.isEnabled(p));\n      for (const particle of query) {\n        if (area instanceof Circle) {\n          circleBounce(circleBounceDataFromParticle(particle), {\n            position,\n            radius,\n            mass: radius ** 2 * Math.PI / 2,\n            velocity: Vector.origin,\n            factor: Vector.origin\n          });\n        } else if (area instanceof Rectangle) {\n          rectBounce(particle, calculateBounds(position, radius));\n        }\n      }\n    };\n    this._processMouseBounce = () => {\n      const container = this.container,\n        pxRatio = container.retina.pixelRatio,\n        tolerance = 10 * pxRatio,\n        mousePos = container.interactivity.mouse.position,\n        radius = container.retina.bounceModeDistance;\n      if (!radius || radius < 0 || !mousePos) {\n        return;\n      }\n      this._processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n    };\n    this._singleSelectorBounce = (selector, div) => {\n      const container = this.container,\n        query = document.querySelectorAll(selector);\n      if (!query.length) {\n        return;\n      }\n      query.forEach(item => {\n        const elem = item,\n          pxRatio = container.retina.pixelRatio,\n          pos = {\n            x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n            y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n          },\n          radius = elem.offsetWidth / 2 * pxRatio,\n          tolerance = 10 * pxRatio,\n          area = div.type === \"circle\" ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n        this._processBounce(pos, radius, area);\n      });\n    };\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      bounce = container.actualOptions.interactivity.modes.bounce;\n    if (!bounce) {\n      return;\n    }\n    container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n  }\n  interact() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = _this.container,\n        options = container.actualOptions,\n        events = options.interactivity.events,\n        mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n        hoverEnabled = events.onHover.enable,\n        hoverMode = events.onHover.mode,\n        divs = events.onDiv;\n      if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n        _this._processMouseBounce();\n      } else {\n        divModeExecute(\"bounce\", divs, (selector, div) => _this._singleSelectorBounce(selector, div));\n      }\n    })();\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? options.interactivity).events,\n      divs = events.onDiv;\n    return mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode) || isDivModeEnabled(\"bounce\", divs);\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.bounce) {\n      options.bounce = new Bounce();\n    }\n    for (const source of sources) {\n      options.bounce.load(source?.bounce);\n    }\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}