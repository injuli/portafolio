{"ast":null,"code":"import { getRangeValue } from \"../Utils/NumberUtils\";\nimport { isSsr } from \"../Utils/Utils\";\nexport class Retina {\n  constructor(container) {\n    this.container = container;\n    this.pixelRatio = 1;\n    this.reduceFactor = 1;\n  }\n  init() {\n    const container = this.container,\n      options = container.actualOptions;\n    this.pixelRatio = !options.detectRetina || isSsr() ? 1 : window.devicePixelRatio;\n    this.reduceFactor = 1;\n    const ratio = this.pixelRatio;\n    if (container.canvas.element) {\n      const element = container.canvas.element;\n      container.canvas.size.width = element.offsetWidth * ratio;\n      container.canvas.size.height = element.offsetHeight * ratio;\n    }\n    const particles = options.particles,\n      moveOptions = particles.move;\n    this.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n    this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n    this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n  }\n  initParticle(particle) {\n    const options = particle.options,\n      ratio = this.pixelRatio,\n      moveOptions = options.move,\n      moveDistance = moveOptions.distance,\n      props = particle.retina;\n    props.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n    props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\n    props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\n    props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n    const maxDistance = props.maxDistance;\n    maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n    maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n    props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}