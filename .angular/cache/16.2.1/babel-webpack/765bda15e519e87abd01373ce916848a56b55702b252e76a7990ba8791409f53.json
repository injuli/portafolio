{"ast":null,"code":"import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n  static init(options) {\n    const particles = new Particles(),\n      selector = options.selector;\n    if (!selector) {\n      throw new Error(\"No selector provided\");\n    }\n    const el = document.querySelector(selector);\n    if (!el) {\n      throw new Error(\"No element found for selector\");\n    }\n    tsParticles.set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n      fullScreen: {\n        enable: false\n      },\n      particles: {\n        color: {\n          value: options.color ?? \"!000000\"\n        },\n        links: {\n          color: \"random\",\n          distance: options.minDistance ?? 120,\n          enable: options.connectParticles ?? false\n        },\n        move: {\n          enable: true,\n          speed: options.speed ?? 0.5\n        },\n        number: {\n          value: options.maxParticles ?? 100\n        },\n        size: {\n          value: {\n            min: 1,\n            max: options.sizeVariations ?? 3\n          }\n        }\n      },\n      responsive: options.responsive?.map(responsive => ({\n        maxWidth: responsive.breakpoint,\n        options: {\n          particles: {\n            color: {\n              value: responsive.options?.color\n            },\n            links: {\n              distance: responsive.options?.minDistance,\n              enable: responsive.options?.connectParticles\n            },\n            number: {\n              value: options.maxParticles\n            },\n            move: {\n              enable: true,\n              speed: responsive.options?.speed\n            },\n            size: {\n              value: responsive.options?.sizeVariations\n            }\n          }\n        }\n      }))\n    }).then(container => {\n      particles._container = container;\n    });\n    return particles;\n  }\n  destroy() {\n    const container = this._container;\n    container && container.destroy();\n  }\n  pauseAnimation() {\n    const container = this._container;\n    container && container.pause();\n  }\n  resumeAnimation() {\n    const container = this._container;\n    container && container.play();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}