{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Subject, from, mergeMap, EMPTY, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles';\nlet NgParticlesComponent = /*#__PURE__*/(() => {\n  class NgParticlesComponent {\n    constructor(platformId) {\n      this.platformId = platformId;\n      this.particlesLoaded = new EventEmitter();\n      this.destroy$ = new Subject();\n    }\n    ngAfterViewInit() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      const cb = container => {\n        this.particlesLoaded.emit(container);\n      };\n      from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve()).pipe(mergeMap(() => {\n        if (this.url) {\n          if (this.id) {\n            return tsParticles.loadJSON(this.id, this.url);\n          } else {\n            return tsParticles.loadJSON(this.url);\n          }\n        } else if (this.options) {\n          if (this.id) {\n            return tsParticles.load(this.id, this.options);\n          } else {\n            return tsParticles.load(this.options);\n          }\n        } else {\n          console.error('You must specify options or url to load tsParticles');\n          return EMPTY;\n        }\n      }), takeUntil(this.destroy$)).subscribe(cb);\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n    }\n  }\n  NgParticlesComponent.ɵfac = function NgParticlesComponent_Factory(t) {\n    return new (t || NgParticlesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  NgParticlesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgParticlesComponent,\n    selectors: [[\"ng-particles\"]],\n    inputs: {\n      options: \"options\",\n      url: \"url\",\n      id: \"id\",\n      particlesInit: \"particlesInit\"\n    },\n    outputs: {\n      particlesLoaded: \"particlesLoaded\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\"]],\n    template: function NgParticlesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", ctx.id);\n      }\n    },\n    encapsulation: 2\n  });\n  return NgParticlesComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ParticlesComponent = /*#__PURE__*/(() => {\n  class ParticlesComponent extends NgParticlesComponent {\n    constructor() {\n      super(...arguments);\n      this.particlesLoaded = new EventEmitter();\n    }\n  }\n  ParticlesComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵParticlesComponent_BaseFactory;\n    return function ParticlesComponent_Factory(t) {\n      return (ɵParticlesComponent_BaseFactory || (ɵParticlesComponent_BaseFactory = i0.ɵɵgetInheritedFactory(ParticlesComponent)))(t || ParticlesComponent);\n    };\n  }();\n  ParticlesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ParticlesComponent,\n    selectors: [[\"Particles\"]],\n    inputs: {\n      options: \"options\",\n      url: \"url\",\n      id: \"id\",\n      particlesInit: \"particlesInit\"\n    },\n    outputs: {\n      particlesLoaded: \"particlesLoaded\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\"]],\n    template: function ParticlesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", ctx.id);\n      }\n    },\n    encapsulation: 2\n  });\n  return ParticlesComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgParticlesModule = /*#__PURE__*/(() => {\n  class NgParticlesModule {}\n  NgParticlesModule.ɵfac = function NgParticlesModule_Factory(t) {\n    return new (t || NgParticlesModule)();\n  };\n  NgParticlesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgParticlesModule\n  });\n  NgParticlesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgParticlesModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ng-particles\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgParticlesComponent, NgParticlesModule, ParticlesComponent };\n//# sourceMappingURL=ng-particles.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}