{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      grab = container.actualOptions.interactivity.modes.grab;\n    if (!grab) {\n      return;\n    }\n    container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n  }\n  interact() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const container = _this.container,\n        options = container.actualOptions,\n        interactivity = options.interactivity;\n      if (!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n        return;\n      }\n      const mousePos = container.interactivity.mouse.position;\n      if (!mousePos) {\n        return;\n      }\n      const distance = container.retina.grabModeDistance;\n      if (!distance || distance < 0) {\n        return;\n      }\n      const query = container.particles.quadTree.queryCircle(mousePos, distance, p => _this.isEnabled(p));\n      for (const particle of query) {\n        const pos = particle.getPosition(),\n          pointDistance = getDistance(pos, mousePos);\n        if (pointDistance > distance) {\n          continue;\n        }\n        const grabLineOptions = interactivity.modes.grab.links,\n          lineOpacity = grabLineOptions.opacity,\n          opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n        if (opacityLine <= 0) {\n          continue;\n        }\n        const optColor = grabLineOptions.color ?? particle.options.links?.color;\n        if (!container.particles.grabLineColor && optColor) {\n          const linksOptions = interactivity.modes.grab.links;\n          container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n        }\n        const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n        if (!colorLine) {\n          continue;\n        }\n        drawGrab(container, particle, colorLine, opacityLine, mousePos);\n      }\n    })();\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      mouse = container.interactivity.mouse,\n      events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.grab) {\n      options.grab = new Grab();\n    }\n    for (const source of sources) {\n      options.grab.load(source?.grab);\n    }\n  }\n  reset() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}