{"ast":null,"code":"import _asyncToGenerator from \"D:/Ingrid/Documentos/portafolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getLogger, isFunction } from \"../Utils/Utils\";\nimport { Canvas } from \"./Canvas\";\nimport { EventListeners } from \"./Utils/EventListeners\";\nimport { Options } from \"../Options/Classes/Options\";\nimport { Particles } from \"./Particles\";\nimport { Retina } from \"./Retina\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { getRangeValue } from \"../Utils/NumberUtils\";\nimport { loadOptions } from \"../Utils/OptionsUtils\";\nfunction guardCheck(container) {\n  return container && !container.destroyed;\n}\nfunction initDelta(value, fpsLimit = 60, smooth = false) {\n  return {\n    value,\n    factor: smooth ? 60 / fpsLimit : 60 * value / 1000\n  };\n}\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\n  const options = new Options(engine, container);\n  loadOptions(options, ...sourceOptionsArr);\n  return options;\n}\nconst defaultPathGeneratorKey = \"default\",\n  defaultPathGenerator = {\n    generate: p => p.velocity,\n    init: () => {},\n    update: () => {},\n    reset: () => {}\n  };\nexport class Container {\n  constructor(engine, id, sourceOptions) {\n    var _this = this,\n      _ref;\n    this.id = id;\n    this._intersectionManager = entries => {\n      if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n        return;\n      }\n      for (const entry of entries) {\n        if (entry.target !== this.interactivity.element) {\n          continue;\n        }\n        (entry.isIntersecting ? this.play : this.pause)();\n      }\n    };\n    this._nextFrame = function (_x) {\n      return (_ref = _ref || _asyncToGenerator(function* (timestamp) {\n        try {\n          if (!_this.smooth && _this.lastFrameTime !== undefined && timestamp < _this.lastFrameTime + 1000 / _this.fpsLimit) {\n            _this.draw(false);\n            return;\n          }\n          _this.lastFrameTime ??= timestamp;\n          const delta = initDelta(timestamp - _this.lastFrameTime, _this.fpsLimit, _this.smooth);\n          _this.addLifeTime(delta.value);\n          _this.lastFrameTime = timestamp;\n          if (delta.value > 1000) {\n            _this.draw(false);\n            return;\n          }\n          yield _this.particles.draw(delta);\n          if (!_this.alive()) {\n            _this.destroy();\n            return;\n          }\n          if (_this.getAnimationStatus()) {\n            _this.draw(false);\n          }\n        } catch (e) {\n          getLogger().error(`${errorPrefix} in animation loop`, e);\n        }\n      })).apply(this, arguments);\n    };\n    this._engine = engine;\n    this.fpsLimit = 120;\n    this.smooth = false;\n    this._delay = 0;\n    this._duration = 0;\n    this._lifeTime = 0;\n    this._firstStart = true;\n    this.started = false;\n    this.destroyed = false;\n    this._paused = true;\n    this.lastFrameTime = 0;\n    this.zLayers = 100;\n    this.pageHidden = false;\n    this._sourceOptions = sourceOptions;\n    this._initialSourceOptions = sourceOptions;\n    this.retina = new Retina(this);\n    this.canvas = new Canvas(this);\n    this.particles = new Particles(this._engine, this);\n    this.pathGenerators = new Map();\n    this.interactivity = {\n      mouse: {\n        clicking: false,\n        inside: false\n      }\n    };\n    this.plugins = new Map();\n    this.drawers = new Map();\n    this._options = loadContainerOptions(this._engine, this);\n    this.actualOptions = loadContainerOptions(this._engine, this);\n    this._eventListeners = new EventListeners(this);\n    if (typeof IntersectionObserver !== \"undefined\" && IntersectionObserver) {\n      this._intersectionObserver = new IntersectionObserver(entries => this._intersectionManager(entries));\n    }\n    this._engine.dispatchEvent(\"containerBuilt\", {\n      container: this\n    });\n  }\n  get options() {\n    return this._options;\n  }\n  get sourceOptions() {\n    return this._sourceOptions;\n  }\n  addClickHandler(callback) {\n    if (!guardCheck(this)) {\n      return;\n    }\n    const el = this.interactivity.element;\n    if (!el) {\n      return;\n    }\n    const clickOrTouchHandler = (e, pos, radius) => {\n      if (!guardCheck(this)) {\n        return;\n      }\n      const pxRatio = this.retina.pixelRatio,\n        posRetina = {\n          x: pos.x * pxRatio,\n          y: pos.y * pxRatio\n        },\n        particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n      callback(e, particles);\n    };\n    const clickHandler = e => {\n      if (!guardCheck(this)) {\n        return;\n      }\n      const mouseEvent = e,\n        pos = {\n          x: mouseEvent.offsetX || mouseEvent.clientX,\n          y: mouseEvent.offsetY || mouseEvent.clientY\n        };\n      clickOrTouchHandler(e, pos, 1);\n    };\n    const touchStartHandler = () => {\n      if (!guardCheck(this)) {\n        return;\n      }\n      touched = true;\n      touchMoved = false;\n    };\n    const touchMoveHandler = () => {\n      if (!guardCheck(this)) {\n        return;\n      }\n      touchMoved = true;\n    };\n    const touchEndHandler = e => {\n      if (!guardCheck(this)) {\n        return;\n      }\n      if (touched && !touchMoved) {\n        const touchEvent = e;\n        let lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n        if (!lastTouch) {\n          lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - 1];\n          if (!lastTouch) {\n            return;\n          }\n        }\n        const element = this.canvas.element,\n          canvasRect = element ? element.getBoundingClientRect() : undefined,\n          pos = {\n            x: lastTouch.clientX - (canvasRect ? canvasRect.left : 0),\n            y: lastTouch.clientY - (canvasRect ? canvasRect.top : 0)\n          };\n        clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n      }\n      touched = false;\n      touchMoved = false;\n    };\n    const touchCancelHandler = () => {\n      if (!guardCheck(this)) {\n        return;\n      }\n      touched = false;\n      touchMoved = false;\n    };\n    let touched = false,\n      touchMoved = false;\n    el.addEventListener(\"click\", clickHandler);\n    el.addEventListener(\"touchstart\", touchStartHandler);\n    el.addEventListener(\"touchmove\", touchMoveHandler);\n    el.addEventListener(\"touchend\", touchEndHandler);\n    el.addEventListener(\"touchcancel\", touchCancelHandler);\n  }\n  addLifeTime(value) {\n    this._lifeTime += value;\n  }\n  addPath(key, generator, override = false) {\n    if (!guardCheck(this) || !override && this.pathGenerators.has(key)) {\n      return false;\n    }\n    this.pathGenerators.set(key, generator ?? defaultPathGenerator);\n    return true;\n  }\n  alive() {\n    return !this._duration || this._lifeTime <= this._duration;\n  }\n  destroy() {\n    if (!guardCheck(this)) {\n      return;\n    }\n    this.stop();\n    this.particles.destroy();\n    this.canvas.destroy();\n    for (const [, drawer] of this.drawers) {\n      drawer.destroy && drawer.destroy(this);\n    }\n    for (const key of this.drawers.keys()) {\n      this.drawers.delete(key);\n    }\n    this._engine.plugins.destroy(this);\n    this.destroyed = true;\n    const mainArr = this._engine.dom(),\n      idx = mainArr.findIndex(t => t === this);\n    if (idx >= 0) {\n      mainArr.splice(idx, 1);\n    }\n    this._engine.dispatchEvent(\"containerDestroyed\", {\n      container: this\n    });\n  }\n  draw(force) {\n    var _this2 = this,\n      _ref2;\n    if (!guardCheck(this)) {\n      return;\n    }\n    let refreshTime = force;\n    this._drawAnimationFrame = requestAnimationFrame(function (_x2) {\n      return (_ref2 = _ref2 || _asyncToGenerator(function* (timestamp) {\n        if (refreshTime) {\n          _this2.lastFrameTime = undefined;\n          refreshTime = false;\n        }\n        yield _this2._nextFrame(timestamp);\n      })).apply(this, arguments);\n    });\n  }\n  export(type, options = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      for (const [, plugin] of _this3.plugins) {\n        if (!plugin.export) {\n          continue;\n        }\n        const res = yield plugin.export(type, options);\n        if (!res.supported) {\n          continue;\n        }\n        return res.blob;\n      }\n      getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\n    })();\n  }\n  getAnimationStatus() {\n    return !this._paused && !this.pageHidden && guardCheck(this);\n  }\n  handleClickMode(mode) {\n    if (!guardCheck(this)) {\n      return;\n    }\n    this.particles.handleClickMode(mode);\n    for (const [, plugin] of this.plugins) {\n      plugin.handleClickMode && plugin.handleClickMode(mode);\n    }\n  }\n  init() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!guardCheck(_this4)) {\n        return;\n      }\n      const shapes = _this4._engine.plugins.getSupportedShapes();\n      for (const type of shapes) {\n        const drawer = _this4._engine.plugins.getShapeDrawer(type);\n        if (drawer) {\n          _this4.drawers.set(type, drawer);\n        }\n      }\n      _this4._options = loadContainerOptions(_this4._engine, _this4, _this4._initialSourceOptions, _this4.sourceOptions);\n      _this4.actualOptions = loadContainerOptions(_this4._engine, _this4, _this4._options);\n      const availablePlugins = _this4._engine.plugins.getAvailablePlugins(_this4);\n      for (const [id, plugin] of availablePlugins) {\n        _this4.plugins.set(id, plugin);\n      }\n      _this4.retina.init();\n      yield _this4.canvas.init();\n      _this4.updateActualOptions();\n      _this4.canvas.initBackground();\n      _this4.canvas.resize();\n      _this4.zLayers = _this4.actualOptions.zLayers;\n      _this4._duration = getRangeValue(_this4.actualOptions.duration) * 1000;\n      _this4._delay = getRangeValue(_this4.actualOptions.delay) * 1000;\n      _this4._lifeTime = 0;\n      _this4.fpsLimit = _this4.actualOptions.fpsLimit > 0 ? _this4.actualOptions.fpsLimit : 120;\n      _this4.smooth = _this4.actualOptions.smooth;\n      for (const [, drawer] of _this4.drawers) {\n        drawer.init && (yield drawer.init(_this4));\n      }\n      for (const [, plugin] of _this4.plugins) {\n        plugin.init && (yield plugin.init());\n      }\n      _this4._engine.dispatchEvent(\"containerInit\", {\n        container: _this4\n      });\n      _this4.particles.init();\n      _this4.particles.setDensity();\n      for (const [, plugin] of _this4.plugins) {\n        plugin.particlesSetup && plugin.particlesSetup();\n      }\n      _this4._engine.dispatchEvent(\"particlesSetup\", {\n        container: _this4\n      });\n    })();\n  }\n  loadTheme(name) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (!guardCheck(_this5)) {\n        return;\n      }\n      _this5._currentTheme = name;\n      yield _this5.refresh();\n    })();\n  }\n  pause() {\n    if (!guardCheck(this)) {\n      return;\n    }\n    if (this._drawAnimationFrame !== undefined) {\n      cancelAnimationFrame(this._drawAnimationFrame);\n      delete this._drawAnimationFrame;\n    }\n    if (this._paused) {\n      return;\n    }\n    for (const [, plugin] of this.plugins) {\n      plugin.pause && plugin.pause();\n    }\n    if (!this.pageHidden) {\n      this._paused = true;\n    }\n    this._engine.dispatchEvent(\"containerPaused\", {\n      container: this\n    });\n  }\n  play(force) {\n    if (!guardCheck(this)) {\n      return;\n    }\n    const needsUpdate = this._paused || force;\n    if (this._firstStart && !this.actualOptions.autoPlay) {\n      this._firstStart = false;\n      return;\n    }\n    if (this._paused) {\n      this._paused = false;\n    }\n    if (needsUpdate) {\n      for (const [, plugin] of this.plugins) {\n        if (plugin.play) {\n          plugin.play();\n        }\n      }\n    }\n    this._engine.dispatchEvent(\"containerPlay\", {\n      container: this\n    });\n    this.draw(needsUpdate || false);\n  }\n  refresh() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (!guardCheck(_this6)) {\n        return;\n      }\n      _this6.stop();\n      return _this6.start();\n    })();\n  }\n  reset() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (!guardCheck(_this7)) {\n        return;\n      }\n      _this7._initialSourceOptions = undefined;\n      _this7._options = loadContainerOptions(_this7._engine, _this7);\n      _this7.actualOptions = loadContainerOptions(_this7._engine, _this7, _this7._options);\n      return _this7.refresh();\n    })();\n  }\n  setNoise(noiseOrGenerator, init, update) {\n    if (!guardCheck(this)) {\n      return;\n    }\n    this.setPath(noiseOrGenerator, init, update);\n  }\n  setPath(pathOrGenerator, init, update) {\n    if (!pathOrGenerator || !guardCheck(this)) {\n      return;\n    }\n    const pathGenerator = {\n      ...defaultPathGenerator\n    };\n    if (isFunction(pathOrGenerator)) {\n      pathGenerator.generate = pathOrGenerator;\n      if (init) {\n        pathGenerator.init = init;\n      }\n      if (update) {\n        pathGenerator.update = update;\n      }\n    } else {\n      const oldGenerator = pathGenerator;\n      pathGenerator.generate = pathOrGenerator.generate || oldGenerator.generate;\n      pathGenerator.init = pathOrGenerator.init || oldGenerator.init;\n      pathGenerator.update = pathOrGenerator.update || oldGenerator.update;\n    }\n    this.addPath(defaultPathGeneratorKey, pathGenerator, true);\n  }\n  start() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (!guardCheck(_this8) || _this8.started) {\n        return;\n      }\n      yield _this8.init();\n      _this8.started = true;\n      yield new Promise(resolve => {\n        _this8._delayTimeout = setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n          _this8._eventListeners.addListeners();\n          if (_this8.interactivity.element instanceof HTMLElement && _this8._intersectionObserver) {\n            _this8._intersectionObserver.observe(_this8.interactivity.element);\n          }\n          for (const [, plugin] of _this8.plugins) {\n            plugin.start && (yield plugin.start());\n          }\n          _this8._engine.dispatchEvent(\"containerStarted\", {\n            container: _this8\n          });\n          _this8.play();\n          resolve();\n        }), _this8._delay);\n      });\n    })();\n  }\n  stop() {\n    if (!guardCheck(this) || !this.started) {\n      return;\n    }\n    if (this._delayTimeout) {\n      clearTimeout(this._delayTimeout);\n      delete this._delayTimeout;\n    }\n    this._firstStart = true;\n    this.started = false;\n    this._eventListeners.removeListeners();\n    this.pause();\n    this.particles.clear();\n    this.canvas.stop();\n    if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n      this._intersectionObserver.unobserve(this.interactivity.element);\n    }\n    for (const [, plugin] of this.plugins) {\n      plugin.stop && plugin.stop();\n    }\n    for (const key of this.plugins.keys()) {\n      this.plugins.delete(key);\n    }\n    this._sourceOptions = this._options;\n    this._engine.dispatchEvent(\"containerStopped\", {\n      container: this\n    });\n  }\n  updateActualOptions() {\n    this.actualOptions.responsive = [];\n    const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n    this.actualOptions.setTheme(this._currentTheme);\n    if (this.responsiveMaxWidth === newMaxWidth) {\n      return false;\n    }\n    this.responsiveMaxWidth = newMaxWidth;\n    return true;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}