{"ast":null,"code":"import { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    const container = this.container,\n      particlesOptions = particle.options,\n      lifeOptions = particlesOptions.life;\n    if (!lifeOptions) {\n      return;\n    }\n    particle.life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: lifeOptions.count\n    };\n    if (particle.life.duration <= 0) {\n      particle.life.duration = -1;\n    }\n    if (particle.life.count <= 0) {\n      particle.life.count = -1;\n    }\n    if (particle.life) {\n      particle.spawning = particle.life.delay > 0;\n    }\n  }\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n  loadOptions(options, ...sources) {\n    if (!options.life) {\n      options.life = new Life();\n    }\n    for (const source of sources) {\n      options.life.load(source?.life);\n    }\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle) || !particle.life) {\n      return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n      life.delayTime += delta.value;\n      if (life.delayTime >= particle.life.delay) {\n        justSpawned = true;\n        particle.spawning = false;\n        life.delayTime = 0;\n        life.time = 0;\n      } else {\n        return;\n      }\n    }\n    if (life.duration === -1) {\n      return;\n    }\n    if (particle.spawning) {\n      return;\n    }\n    if (justSpawned) {\n      life.time = 0;\n    } else {\n      life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n      return;\n    }\n    life.time = 0;\n    if (particle.life.count > 0) {\n      particle.life.count--;\n    }\n    if (particle.life.count === 0) {\n      particle.destroy();\n      return;\n    }\n    const canvasSize = this.container.canvas.size,\n      widthRange = setRangeValue(0, canvasSize.width),\n      heightRange = setRangeValue(0, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = 0;\n    life.time = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n      life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n      life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}